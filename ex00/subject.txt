 'ClapTrap'이라는 클래스를 구현해야 합니다. 이 클래스는 다음과 같은 개인 속성들을 갖습니다
  (괄호 안에 명시된 값으로 초기화됨):

Name: 생성자에 전달되는 이름.
Hit points (10): ClapTrap의 건강을 나타냅니다.
Energy points (10).
Attack damage (0).
ClapTrap이 더 현실적으로 보이도록 다음과 같은 공개 멤버 함수들을 추가합니다:

void attack(const std::string& target): ClapTrap이 공격할 때, 
대상이 <attack damage>만큼의 히트 포인트를 잃게 합니다.
void takeDamage(unsigned int amount).
void beRepaired(unsigned int amount): ClapTrap이 자신을 수리할 때, 
<amount> 만큼의 히트 포인트를 회복합니다. 
공격과 수리는 각각 1 에너지 포인트를 소비합니다. 
물론, ClapTrap는 히트 포인트나 에너지 포인트가 없으면 아무것도 할 수 없습니다.
이 모든 멤버 함수들에서는 무슨 일이 일어나는지 설명하는 메시지를 출력해야 합니다. 
예를 들어, attack() 함수는 다음과 같은 메시지를 표시할 수 있습니다 (물론 꺽쇠 괄호는 없이):
"ClapTrap <name>이 <target>을 공격하여 <damage> 포인트의 피해를 입혔습니다!"

생성자와 소멸자도 호출되었음을 쉽게 알 수 있도록 메시지를 표시해야 합니다.

코드가 예상대로 작동하는지 확인하기 위해 자체 테스트를 구현하고 제출하세요.

First, you have to implement a class! How original!
It will be called ClapTrap and will have the following private attributes initialized
to the values specified in brackets:
• Name, which is passed as parameter to a constructor
• Hit points (10), represent the health of the ClapTrap
• Energy points (10)
• Attack damage (0)
Add the following public member functions so the ClapTrap looks more realistic:
• void attack(const std::string& target);
• void takeDamage(unsigned int amount);
• void beRepaired(unsigned int amount);
When ClapTrack attacks, it causes its target to lose <attack damage> hit points.
When ClapTrap repairs itself, it gets <amount> hit points back. Attacking and repairing
cost 1 energy point each. Of course, ClapTrap can’t do anything if it has no hit points
or energy points left.
5
C++ - Module 03 Inheritance
In all of these member functions, you have to print a message to describe what happens. For example, the attack() function may display something like (of course, without
the angle brackets):
ClapTrap <name> attacks <target>, causing <damage> points of damage!
The constructors and destructor must also display a message, so your peer-evaluators
can easily see they have been called.
Implement and turn in your own tests to ensure your code works as expected.