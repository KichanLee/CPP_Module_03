
In this exercise, you will create a monster: a ClapTrap that’s half FragTrap, half
ScavTrap. It will be named DiamondTrap, and it will inherit from both the FragTrap
AND the ScavTrap. This is so risky!
The DiamondTrap class will have a name private attribute. Give to this attribute
exactly the same variable’s name (not talking about the robot’s name here) than the one
in the ClapTrap base class.
To be more clear, here are two examples.
If ClapTrap’s variable is name, give the name name to the one of the DiamondTrap.
If ClapTrap’s variable is _name, give the name _name to the one of the DiamondTrap.
Its attributes and member functions will be picked from either one of its parent classes:
• Name, which is passed as parameter to a constructor
• ClapTrap::name (parameter of the constructor + "_clap_name" suffix)
• Hit points (FragTrap)
• Energy points (ScavTrap)
• Attack damage (FragTrap)
• attack() (Scavtrap)

================================================================================================

이번 연습에서는 반은 FragTrap, 반은 ScavTrap인 ClapTrap을 만들게 됩니다. 
이것은 DiamondTrap이라는 이름을 가지며, 
FragTrap과 ScavTrap 모두로부터 상속받습니다. 이것은 매우 위험한 일입니다!

DiamondTrap 클래스는 name이라는 개인 속성을 가질 것입니다. 

이 속성에 ClapTrap 기본 클래스에서와 
똑같은 변수 이름(여기서 로봇의 이름을 말하는 것이 아님)을 주세요.

더 명확하게 하기 위해 두 가지 예시를 들겠습니다.

만약 ClapTrap의 변수가 name이라면, DiamondTrap의 변수 이름도 name으로 지정하세요.

만약 ClapTrap의 변수가 _name이라면, DiamondTrap의 변수 이름도 _name으로 지정하세요.

DiamondTrap의 속성과 멤버 함수는 두 부모 클래스 중 하나에서 선택될 것입니다:

생성자에 전달되는 이름(Name)
ClapTrap::name (생성자의 매개변수 + "_clap_name" 접미사)
히트 포인트 (FragTrap에서 가져옴)
에너지 포인트 (ScavTrap에서 가져옴)
공격력 (FragTrap에서 가져옴)
attack() (ScavTrap에서 가져옴)

