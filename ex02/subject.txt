Making ClapTraps is probably starting to get on your nerves.
Now, implement a FragTrap class that inherits from ClapTrap. It is very similar to
ScavTrap. However, its construction and destruction messages must be different. Proper
construction/destruction chaining must be shown in your tests. When a FragTrap is
created, the program starts by building a ClapTrap. Destruction is in reverse order.
Same things for the attributes, but with different values this time:
• Name, which is passed as parameter to a constructor
• Hit points (100), represent the health of the ClapTrap
• Energy points (100)
• Attack damage (30)
FragTrap has a special capacity too:
void highFivesGuys(void);
This member function displays a positive high fives request on the standard output.
Again, add more tests to your program.

=======================================================================


ClapTraps를 만드는 것이 이제 지겹게 느껴질 수도 있습니다. 
이제 ClapTrap에서 파생된 FragTrap 클래스를 구현하세요. 
이 클래스는 ScavTrap과 매우 유사하지만, 생성 및 소멸 메시지가 달라야 합니다.
테스트에서는 적절한 생성 및 소멸 체이닝을 보여줘야 합니다. 
FragTrap이 생성될 때, 프로그램은 ClapTrap을 먼저 만듭니다. 소멸 순서는 반대입니다.

속성도 동일하지만 이번에는 다른 값으로 설정됩니다:

생성자에 전달되는 이름(Name)
히트 포인트(Hit points, 100): ClapTrap의 체력을 나타냅니다.
에너지 포인트(Energy points, 100)
공격력(Attack damage, 30)
FragTrap에도 특별한 기능이 있습니다:

void highFivesGuys(void); 이 멤버 함수는 표준 출력에 긍정적인 하이파이브 요청을 표시합니다.
프로그램에 더 많은 테스트를 추가하세요.